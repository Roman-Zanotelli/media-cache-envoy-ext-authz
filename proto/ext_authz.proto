syntax = "proto3";

package extauthz;
//I just copied this and some of its dependencies i felt were possibly relevant from envoys git, a lot can be removed

service Authorization {
  // Performs authorization check based on the attributes associated with the
  // incoming request, and returns status `OK` or not `OK`.
  rpc Check(CheckRequest) returns (CheckResponse) {
  }
}

message CheckRequest {

  // The unique ID for a request, which can be propagated to downstream
  // systems. The ID should have low probability of collision
  // within a single day for a specific service.
  // For HTTP requests, it should be X-Request-ID or equivalent.
  string id = 1;

  // The HTTP request method, such as ``GET``, ``POST``.
  string method = 2;

  // The HTTP request headers. If multiple headers share the same key, they
  // must be merged according to the HTTP spec. All header keys must be
  // lower-cased, because HTTP header keys are case-insensitive.
  // Header value is encoded as UTF-8 string. Non-UTF-8 characters will be replaced by "!".
  // This field will not be set if
  // :ref:`encode_raw_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
  // is set to true.
  map<string, string> headers = 3;

  // A list of the raw HTTP request headers. This is used instead of
  // :ref:`headers <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.headers>` when
  // :ref:`encode_raw_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
  // is set to true.
  //
  // Note that this is not actually a map type. ``header_map`` contains a single repeated field
  // ``headers``.
  //
  // Here, only the ``key`` and ``raw_value`` fields will be populated for each HeaderValue, and
  // that is only when
  // :ref:`encode_raw_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
  // is set to true.
  //
  // Also, unlike the
  // :ref:`headers <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.headers>`
  // field, headers with the same key are not combined into a single comma separated header.
  HeaderMap header_map = 13;

  // The request target, as it appears in the first line of the HTTP request. This includes
  // the URL path and query-string. No decoding is performed.
  string path = 4;

  // The HTTP request ``Host`` or ``:authority`` header value.
  string host = 5;

  // The HTTP URL scheme, such as ``http`` and ``https``.
  string scheme = 6;

  // This field is always empty, and exists for compatibility reasons. The HTTP URL query is
  // included in ``path`` field.
  string query = 7;

  // This field is always empty, and exists for compatibility reasons. The URL fragment is
  // not submitted as part of HTTP requests; it is unknowable.
  string fragment = 8;

  // The HTTP request size in bytes. If unknown, it must be -1.
  int64 size = 9;

  // The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
  //
  // See :repo:`headers.h:ProtocolStrings <source/common/http/headers.h>` for a list of all
  // possible values.
  string protocol = 10;

  // The HTTP request body.
  string body = 11;

  // The HTTP request body in bytes. This is used instead of
  // :ref:`body <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.body>` when
  // :ref:`pack_as_bytes <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.BufferSettings.pack_as_bytes>`
  // is set to true.
  bytes raw_body = 12;
}
message HeaderMap {
  // A list of header names and their values.
  repeated HeaderValue headers = 1;
}
message CheckResponse {
  // Status ``OK`` allows the request. Any other status indicates the request should be denied, and
  // for HTTP filter, if not overridden by :ref:`denied HTTP response status <envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status>`
  // Envoy sends ``403 Forbidden`` HTTP status code by default.
  Status status = 1;
  oneof http_response {
    // Supplies http attributes for a denied response.
    DeniedHttpResponse denied_response = 2;

    // Supplies http attributes for an ok response.
    OkHttpResponse ok_response = 3;
  }
}
message DeniedHttpResponse {

  // This field allows the authorization service to send an HTTP response status code to the
  // downstream client. If not set, Envoy sends ``403 Forbidden`` HTTP status code by default.
  HttpStatus status = 1;

  // This field allows the authorization service to send HTTP response headers
  // to the downstream client. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
  // false when used in this message.
  repeated HeaderValueOption headers = 2;

  // This field allows the authorization service to send a response body data
  // to the downstream client.
  string body = 3;
}

// HTTP attributes for an OK response.
// [#next-free-field: 9]
message OkHttpResponse {

  // HTTP entity headers in addition to the original request headers. This allows the authorization
  // service to append, to add or to override headers from the original request before
  // dispatching it to the upstream. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
  // false when used in this message. By setting the ``append`` field to ``true``,
  // the filter will append the correspondent header value to the matched request header.
  // By leaving ``append`` as false, the filter will either add a new header, or override an existing
  // one if there is a match.
  repeated HeaderValueOption headers = 2;

  // HTTP entity headers to remove from the original request before dispatching
  // it to the upstream. This allows the authorization service to act on auth
  // related headers (like ``Authorization``), process them, and consume them.
  // Under this model, the upstream will either receive the request (if it's
  // authorized) or not receive it (if it's not), but will not see headers
  // containing authorization credentials.
  //
  // Pseudo headers (such as ``:authority``, ``:method``, ``:path`` etc), as well as
  // the header ``Host``, may not be removed as that would make the request
  // malformed. If mentioned in ``headers_to_remove`` these special headers will
  // be ignored.
  //
  // When using the HTTP service this must instead be set by the HTTP
  // authorization service as a comma separated list like so:
  // ``x-envoy-auth-headers-to-remove: one-auth-header, another-auth-header``.
  repeated string headers_to_remove = 5;

  // This field allows the authorization service to send HTTP response headers
  // to the downstream client on success. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>`
  // defaults to false when used in this message.
  repeated HeaderValueOption response_headers_to_add = 6;

  // This field allows the authorization service to set (and overwrite) query
  // string parameters on the original request before it is sent upstream.
  repeated QueryParameter query_parameters_to_set = 7;

  // This field allows the authorization service to specify which query parameters
  // should be removed from the original request before it is sent upstream. Each
  // element in this list is a case-sensitive query parameter name to be removed.
  repeated string query_parameters_to_remove = 8;
}

message QueryParameter {
  // The key of the query parameter. Case sensitive.
  string key = 1;

  // The value of the query parameter.
  string value = 2;
}

message Status {
  int32 code = 1;
  string message = 2;
}
enum StatusCode {
  // Empty - This code not part of the HTTP status code specification, but it is needed for proto
  // `enum` type.
  Empty = 0;

  // Continue - ``100`` status code.
  Continue = 100;

  // OK - ``200`` status code.
  OK = 200;

  // Created - ``201`` status code.
  Created = 201;

  // Accepted - ``202`` status code.
  Accepted = 202;

  // NonAuthoritativeInformation - ``203`` status code.
  NonAuthoritativeInformation = 203;

  // NoContent - ``204`` status code.
  NoContent = 204;

  // ResetContent - ``205`` status code.
  ResetContent = 205;

  // PartialContent - ``206`` status code.
  PartialContent = 206;

  // MultiStatus - ``207`` status code.
  MultiStatus = 207;

  // AlreadyReported - ``208`` status code.
  AlreadyReported = 208;

  // IMUsed - ``226`` status code.
  IMUsed = 226;

  // MultipleChoices - ``300`` status code.
  MultipleChoices = 300;

  // MovedPermanently - ``301`` status code.
  MovedPermanently = 301;

  // Found - ``302`` status code.
  Found = 302;

  // SeeOther - ``303`` status code.
  SeeOther = 303;

  // NotModified - ``304`` status code.
  NotModified = 304;

  // UseProxy - ``305`` status code.
  UseProxy = 305;

  // TemporaryRedirect - ``307`` status code.
  TemporaryRedirect = 307;

  // PermanentRedirect - ``308`` status code.
  PermanentRedirect = 308;

  // BadRequest - ``400`` status code.
  BadRequest = 400;

  // Unauthorized - ``401`` status code.
  Unauthorized = 401;

  // PaymentRequired - ``402`` status code.
  PaymentRequired = 402;

  // Forbidden - ``403`` status code.
  Forbidden = 403;

  // NotFound - ``404`` status code.
  NotFound = 404;

  // MethodNotAllowed - ``405`` status code.
  MethodNotAllowed = 405;

  // NotAcceptable - ``406`` status code.
  NotAcceptable = 406;

  // ProxyAuthenticationRequired - ``407`` status code.
  ProxyAuthenticationRequired = 407;

  // RequestTimeout - ``408`` status code.
  RequestTimeout = 408;

  // Conflict - ``409`` status code.
  Conflict = 409;

  // Gone - ``410`` status code.
  Gone = 410;

  // LengthRequired - ``411`` status code.
  LengthRequired = 411;

  // PreconditionFailed - ``412`` status code.
  PreconditionFailed = 412;

  // PayloadTooLarge - ``413`` status code.
  PayloadTooLarge = 413;

  // URITooLong - ``414`` status code.
  URITooLong = 414;

  // UnsupportedMediaType - ``415`` status code.
  UnsupportedMediaType = 415;

  // RangeNotSatisfiable - ``416`` status code.
  RangeNotSatisfiable = 416;

  // ExpectationFailed - ``417`` status code.
  ExpectationFailed = 417;

  // MisdirectedRequest - ``421`` status code.
  MisdirectedRequest = 421;

  // UnprocessableEntity - ``422`` status code.
  UnprocessableEntity = 422;

  // Locked - ``423`` status code.
  Locked = 423;

  // FailedDependency - ``424`` status code.
  FailedDependency = 424;

  // UpgradeRequired - ``426`` status code.
  UpgradeRequired = 426;

  // PreconditionRequired - ``428`` status code.
  PreconditionRequired = 428;

  // TooManyRequests - ``429`` status code.
  TooManyRequests = 429;

  // RequestHeaderFieldsTooLarge - ``431`` status code.
  RequestHeaderFieldsTooLarge = 431;

  // InternalServerError - ``500`` status code.
  InternalServerError = 500;

  // NotImplemented - ``501`` status code.
  NotImplemented = 501;

  // BadGateway - ``502`` status code.
  BadGateway = 502;

  // ServiceUnavailable - ``503`` status code.
  ServiceUnavailable = 503;

  // GatewayTimeout - ``504`` status code.
  GatewayTimeout = 504;

  // HTTPVersionNotSupported - ``505`` status code.
  HTTPVersionNotSupported = 505;

  // VariantAlsoNegotiates - ``506`` status code.
  VariantAlsoNegotiates = 506;

  // InsufficientStorage - ``507`` status code.
  InsufficientStorage = 507;

  // LoopDetected - ``508`` status code.
  LoopDetected = 508;

  // NotExtended - ``510`` status code.
  NotExtended = 510;

  // NetworkAuthenticationRequired - ``511`` status code.
  NetworkAuthenticationRequired = 511;
}

// HTTP status.
message HttpStatus {
  // Supplies HTTP response code.
  StatusCode code = 1;
}
message HeaderValueOption {

  // Describes the supported actions types for header append action.
  enum HeaderAppendAction {
    // If the header already exists, this action will result in:
    //
    // - Comma-concatenated for predefined inline headers.
    // - Duplicate header added in the ``HeaderMap`` for other headers.
    //
    // If the header doesn't exist then this will add new header with specified key and value.
    APPEND_IF_EXISTS_OR_ADD = 0;

    // This action will add the header if it doesn't already exist. If the header
    // already exists then this will be a no-op.
    ADD_IF_ABSENT = 1;

    // This action will overwrite the specified value by discarding any existing values if
    // the header already exists. If the header doesn't exist then this will add the header
    // with specified key and value.
    OVERWRITE_IF_EXISTS_OR_ADD = 2;

    // This action will overwrite the specified value by discarding any existing values if
    // the header already exists. If the header doesn't exist then this will be no-op.
    OVERWRITE_IF_EXISTS = 3;
  }

  // Header name/value pair that this option applies to.
  HeaderValue header = 1;

  // Describes the action taken to append/overwrite the given value for an existing header
  // or to only add this header if it's absent.
  // Value defaults to :ref:`APPEND_IF_EXISTS_OR_ADD
  // <envoy_v3_api_enum_value_config.core.v3.HeaderValueOption.HeaderAppendAction.APPEND_IF_EXISTS_OR_ADD>`.
  HeaderAppendAction append_action = 3;

  // Is the header value allowed to be empty? If false (default), custom headers with empty values are dropped,
  // otherwise they are added.
  bool keep_empty_value = 4;
}
message HeaderValue {
  // Header name.
  string key = 1;

  // Header value.
  //
  // The same :ref:`format specifier <config_access_log_format>` as used for
  // :ref:`HTTP access logging <config_access_log>` applies here, however
  // unknown header values are replaced with the empty string instead of ``-``.
  // Header value is encoded as string. This does not work for non-utf8 characters.
  // Only one of ``value`` or ``raw_value`` can be set.
  string value = 2;

  // Header value is encoded as bytes which can support non-utf8 characters.
  // Only one of ``value`` or ``raw_value`` can be set.
  bytes raw_value = 3;
}
